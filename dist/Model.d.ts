import Document from './Document';
import { returnParams, SchemaDefinition } from './Schema';
interface IModel {
    new: (doc?: any) => Document;
    find(conditions?: object, fields?: any[]): this;
    find(conditions: object, fields: any[], callback: (err: any, res?: Document[]) => void): void;
    findOne(conditions?: object, fields?: any[]): this;
    findOne(conditions: object, fields: any[], callback: (err: any, res?: Document[]) => void): void;
    findById(id: string, fields?: any[]): this;
    findById(id: string, fields: any[], callback: (err: any, res?: Document[]) => void): void;
    insertOne(params: object): Document | Promise<Document>;
    insertOne(params: object, callback: (err: any, res?: Document) => void): void;
    insertMany(params: any[]): Document[] | Promise<Document[]>;
    insertMany(params: any[], callback: (err: any, res?: Document[]) => void): void;
    findAndUpdate(conditions: object, update: any): Document | Promise<Document>;
    findAndUpdate(conditions: object, update: any, callback: (err: any, res?: Document) => void): void;
    findByIdAndUpdate(id: string, update: any): Document | Promise<Document>;
    findByIdAndUpdate(id: string, update: any, callback: (err: any, res?: Document) => void): void;
    findAndDelete(conditions: any): Document | Promise<Document>;
    findAndDelete(conditions: any, callback: (err: any, res?: Document) => void): void;
    findByIdAndDelete(id: string): Document | Promise<Document>;
    findByIdAndDelete(id: string, callback: (err: any, res?: Document) => void): void;
    limit(val: number | string): this | undefined;
    skip(val: number | string): this | undefined;
    sort(arg: any[]): this | undefined;
    countDocuments(conditions: object): number | Promise<number>;
    countDocuments(conditions: object, callback: (err: any, res?: number) => void): void;
    exec(): Document[] | Promise<Document[]>;
    exec(callback: (err: any, res?: Document[]) => void): void;
}
declare class Model implements IModel {
    private mysqlStructure;
    private methods;
    private query;
    private documentParams;
    constructor(table: string, SchemaParams: returnParams);
    get schema(): SchemaDefinition;
    get tableName(): string;
    new(doc?: any): Document;
    find(conditions?: object, fields?: any[]): this;
    find(conditions: object, fields: any[], callback: (err: any, res?: Document[]) => void): void;
    findOne(conditions?: object, fields?: any[]): this;
    findOne(conditions: object, fields: any[], callback: (err: any, res?: Document[]) => void): void;
    findById(id: string, fields?: any[]): this;
    findById(id: string, fields: any[], callback: (err: any, res?: Document[]) => void): void;
    insertOne(params: object): Document | Promise<Document>;
    insertOne(params: object, callback: (err: any, res?: Document) => void): void;
    insertMany(params: any[]): Document[] | Promise<Document[]>;
    insertMany(params: any[], callback: (err: any, res?: Document[]) => void): void;
    findAndUpdate(conditions: object, update: any): Document | Promise<Document>;
    findAndUpdate(conditions: object, update: any, callback: (err: any, res?: Document) => void): void;
    findByIdAndUpdate(id: string, update: any): Document | Promise<Document>;
    findByIdAndUpdate(id: string, update: any, callback: (err: any, res?: Document) => void): void;
    findAndDelete(conditions: any): Document | Promise<Document>;
    findAndDelete(conditions: any, callback: (err: any, res?: Document) => void): void;
    findByIdAndDelete(id: string): Document | Promise<Document>;
    findByIdAndDelete(id: string, callback: (err: any, res?: Document) => void): void;
    limit(val: number | string): this;
    skip(val: number | string): this;
    sort(arg: any): this;
    countDocuments(conditions?: object): number | Promise<number>;
    countDocuments(conditions: object, callback: (err: any, res?: number) => void): void;
    exec(): Document[] | Promise<Document[]>;
    exec(callback: (err: any, res?: Document[]) => void): void;
    private checkDb;
}
export default Model;
